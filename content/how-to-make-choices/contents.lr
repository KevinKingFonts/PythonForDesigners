_model: chapter
---
title: How to Make Choices
---
abstract: Unfortunately, this is not the self-help section of the manual. It is all about the conditional construct
---
sort_key: 6
---
visual_abstract: abstract-6.svg
---
body: #### section-title ####
content: Operators, Expressions and Statements
----
class: default
----
#### text-block ####
content: An expression is a combination of identifiers, values and operators which computes a value. It is quite similar to an arithmetic expression, with the only difference that the scope of programming languages expressions is way bigger since they can compute any kind of data, be they numerical or otherwise. We have already delved into identifiers and values; what we miss to write proper Python expressions are now the operators. They are special symbols and keywords that instruct a computation between two values. The semantics of an operator depends on the type of its operands.

----
#### section-title ####
content: Logical Operators (Yield Boolean)
----
class: default
----
#### text-block ####
content: Logical operators allow to manipulate and chain boolean values. Non-boolean values can also be operands of a logical operator, but they will be implicitly converted to boolean values with the bool() data type constructor before evaluation.
----
#### image ####
name: not.svg
----
class: small_image
----
#### text-block ####
content: `not` (unary negation) is used to change the state of a boolean type, from `False` to `True`, from `True` to `False`. It is like pressing a switch. "Unary" means that the operator only affects the following operand.
----
#### image ####
name: or.svg
----
class: small_image
----
#### text-block ####
content: `or` is used to build a logical expression that will evaluate `True` if any of the operands is `True`. Look at the diagram on the left: the pipe has a fork with a tap on each side. The fork is the "or" operator, and the taps are the operands; if any of the valves are open (`True`), the water will flow on the other side.
----
#### image ####
name: and.svg
----
class: small_image
----
#### text-block ####
content: `and` (conditional and) is used to build a logical expression that will evaluate `True` if every operand is `True`. Look at the diagram on the left: a straight pipe represents the boolean expression with two taps following each other. The only way to let the water through is to open both valves. Meaning that every operand has to be `True`.

`and` and `or` are also referred to as "short-circuit" operators, because the interpreter will not evaluate the entire expression if unnecessary.
----
#### image ####
name: not_evaluated.svg
----
class: large_image
----
#### text-block ####
content: Here is a table showing their behaviours:
----
#### table ####
path: 01.csv
----
headers: 1
----
#### text-block ####
content: Take into account that logical operators accept any type as operands, not only Boolean. If the operand type is non-boolean, the interpreter will convert the expression to a Boolean value and only after that evaluate the logical expression. For example:
----
#### table ####
path: 02.csv
----
headers: 1
----
#### text-block ####
content: and so on. Check the Boolean Type section if you have any doubt concerning the way bool() works.
----
#### section-title ####
content: Equality Operators (Yield Boolean)
----
class: default
----
#### text-block ####
content: To make reasonable choices, evaluating if values are the *same* is very important. Python can test two different notions of “sameness”, equality and identity:
----
#### table ####
path: 03.csv
----
headers: 1
----
#### text-block ####
content: It is essential to understand the difference between the two different notions in order to write reliable and semantic code.

Equality operators investigate the values of the objects referred; they are usually integers, strings, containers:
----
#### code-example ####
path: 01.py
----
#### text-block ####
content: Identity operators instead, check if two identifiers refer or not to the same object. So, in different words, they check if two identifiers are pointing to the same place in memory. Let’s write a little variation of the code above:
----
#### code-example ####
path: 02.py
----
#### text-block ####
content: So, when should you use what? When comparing numbers, text, containers content is good practice to use `==` and `!=`. Avoid `is` and `is not`, they are ambiguous and often not reliable because of caching. Instead, when comparing identifiers to singletons (`True`, `False`, `None`) you should always use `is` and `is not`. Why? Because there is only one instance of each of these type (therefore their identity is reliable) and makes your code more readable.
----
#### code-example ####
path: 03.py
----
#### section-title ####
content: Comparison Operators (Yield Boolean)
----
class: default
----
#### text-block ####
content: Sorting things is quite a big deal in programming. Python provides a few operators able to detect the size of two expressions:
----
#### table ####
path: 04.csv
----
headers: 1
----
#### text-block ####
content: When comparing non-integer instances, they are translated in a numerical value and then evaluated. For example, strings are converted to sequences of integers according to the position of each character into the Unicode standard.
----
#### section-title ####
content: Arithmetic Operators (Yield Floating Point or Integer)
----
class: default
----
#### text-block ####
content: Computers have the ability to compute arithmetical expression very quickly. Python, of course, supports the standard arithmetic operators as follows:
----
#### table ####
path: 05.csv
----
headers: 1
----
#### text-block ####
content: Addition, subtraction and multiplication have a very straightforward behaviour: if both operands are integer, they yield an integer. If one of the operands is a floating point, they will return a floating point value. For example:
----
#### code-example ####
path: 04.py
----
#### text-block ####
content: Division has two different operators which behave slightly differently. The standard division is what you would expect from it:
----
#### code-example ####
path: 05.py
----
#### text-block ####
content: If you are allowed to slice units,
you can proceed as follows:
----
#### image ####
name: 4times.svg
----
class: large_image
----
#### text-block ####
content: The integer division instead yields the mathematical floor of the quotient:
----
#### code-example ####
path: 06.py
----
#### text-block ####
content: if you can’t slice units you group 4 units only once from a collection of 6
----
#### image ####
name: 4.svg
----
class: small_image
----
#### text-block ####
content: The modulo operator yields the remainder of such division:
----
#### code-example ####
path: 07.py
----
#### image ####
name: modulo.svg
----
class: small_image
----
#### text-block ####
content: In combination with the equivalent (`==`) or not equivalent (`!=`) operator, the modulo can be really helpful in checking whether a number is even or odd, whether a number is decimal or not and so on
----
#### code-example ####
path: 08.py
----
#### section-title ####
content: Compound Expressions
----
class: default
----
#### text-block ####
content: Python provides the opportunity to combine more expressions at once. The result of these compound expressions relies on the evaluation of each single expression within it. The order of evaluation affects the final result, so it is very important to get a grip on precedence standard of the interpreter. For example:
----
#### code-example ####
path: 09.py
----
#### text-block ####
content: Because of the higher precedence of multiplication over addition, 2*8 is evaluated first, then 16 is added to 5, giving 21 as result. In order to manipulate the execution order of evaluation, parenthesis can be used. For example:
----
#### code-example ####
path: 10.py
----
#### text-block ####
content: Here is a concise table of the expressions evaluation order sorted by higher precedence
----
#### table ####
path: 06.csv
----
headers: 1
----
#### section-title ####
content: Colon Syntax
----
class: default
----
#### text-block ####
content: As we already mentioned, whitespace is semantic in Python. This means that in order to group lines of code it is necessary to compose the statements which form the block accordingly. Consider the following list of words:
----
#### code-example ####
path: 11.py
----
#### text-block ####
content: Here we are taking no advantage of visual variables in order to make the hierarchy more accessible to readers. We can only rely on the meaning of these words and try to detect a possible structure. So, at first sight, we detect no hierarchy, but after reading, we notice that `groceries` can group all the other items.
----
#### image ####
name: groceries.svg
----
class: small_image
----
#### text-block ####
content: There are a few contrivances we can implement to express this structure at best using only typography. Let’s start to make some order moving groceries to the top:
----
#### code-example ####
path: 12.py
----
#### text-block ####
content: Then we should find a way to associate unequivocally `potatoes`, `eggplants` and `tomatoes` as part of the same group. A very elegant and economic way is to move their alignment rightwards, like this:
----
#### code-example ####
path: 13.py
----
#### text-block ####
content: After grouping, hierarchy. A very common and shared way of tag the first line of a list as a title is to use the colon sign, like:
----
#### code-example ####
path: 14.py
----
#### text-block ####
content: If we compare the final outcome with the original one, we will notice a sensible improvement. We do this all day without even noticing. We activate visual variables in order to build images with clear meanings that are easy to access to other people. It is a subtle kind of grammar, but an extremely powerful one.

The designer of Python, Guido van Rossum, decided to implement such behaviour into the Python programming language. This behaviour is mandatory, meaning that the Python interpreter expects the user to indent code semantically in order to organize code blocks.
These statements need a colon as final delimiter:
----
#### code-example ####
path: 15.py
----
#### text-block ####
content: The code related to the statement needs to be indented four space rightwards in order to be considered as the body of the construct. For example:
----
#### code-example ####
path: 16.py
----
#### text-block ####
content: ‘something else’ is not part of the conditional construct because it falls out of the indented body. Consider also that Python allows nested structures like:
----
#### code-example ####
path: 17.py
----
#### text-block ####
content: In order to execute the conditional construct nested into the for-loop, this has to be indented four spaces more than its parent statement, which is already indented four spaces. Meaning, it has to be indented eight spaces rightwards. Just like a matryoshka.
----
#### image ####
name: paper.svg
----
class: small_image
----
#### section-title ####
content: Conditional Execution
----
class: default
----
#### text-block ####
content: Now that we have the tools, we need to instruct the interpreter to make reasonable choices. As we already said, it is critical while programming to be able to check whether a condition is true or not and then to be able to reroute the execution flow on different blocks of code.

Here’s a common standard diagram used to describe these patterns is the flowchart:

----
#### image ####
name: fridge.svg
----
class: large_image
----
#### text-block ####
content: Python provides a control structure called “conditional construct” which allows to define whether a block of code should be executed or not. The minimal form of a conditional structure is:
----
#### code-example ####
path: 18.py
----
#### image ####
name: condition1.svg
----
class: large_image
----
#### text-block ####
content: Here’s a concrete example: 
----
#### code-example ####
path: 19.py
----
#### text-block ####
content: The condition is a Boolean expression. If this expression results in a `True` value, the indented block of code that follows will be executed. The body of the conditional construct can include other nested structures, they only need to be indented accordingly.
----
#### code-example ####
path: 20.py
----
#### text-block ####
content: As soon as a statement falls out of the indented body, it is not considered part of the conditional structure anymore. For example:
----
#### code-example ####
path: 21.py
----
#### text-block ####
content: In this case, whether the body is executed or not, a rectangle will be drawn on the canvas.

An `else` statement can be placed at the end of the conditional construct. The instructions grouped into this statement will be executed if any other statement (`if`, `elif`) of the conditional construct is not met. Here’s how it is used:
----
#### code-example ####
path: 22.py
----
#### image ####
name: else.svg
----
class: large_image
----
#### text-block ####
content: Here’s a concrete example:
----
#### code-example ####
path: 23.py
----
#### text-block ####
content: The `else` keyword is not followed by any condition, because it doesn’t need any evaluation. It is an interpreter parachute.
----
#### image ####
name: parachute.svg
----
class: small_image
----
#### text-block ####
content: Moreover, Python allows to chain the evaluation of many conditions at once, using an indefinite number of `elif` (which means “else if”) statements between `if` (mandatory) and `else` (optional).

The structure is then:
----
#### code-example ####
path: 24.py
----
#### image ####
name: elif.svg
----
class: large_image
----
#### text-block ####
content: for example
----
#### code-example ####
path: 25.py
----
#### image ####
name: myVar.svg
----
class: large_image
----
#### text-block ####
content: Take note of the use of indentation. `if`, `elif` and `else` are aligned to the left while their bodies are four spaces indented to the right.
----
#### section-title ####
content: Workbook
----
class: workbook
----
#### exercise ####
content: 

Draw a flowchart based on the following code:

size(100,100)
myVar = 10
if 20 < myVar:
    fill(0)
elif 20 >= myVar > 12:
    fill(.3)
elif 12 >= myVar > 8:
    fill(.6)
else:
    fill(.9)
rect(10, 10, 50, 50)

----
#### exercise ####
content: 
Create a 200x200pt canvas. Draw a sequence of squares from top to bottom using a while loop. The square side should be adjustable through a variable. Odd squares should be light gray, even tiles should be dark gray.

----
#### exercise ####
content: 
Extend the previous exercise. Nest two while statements and draw a pattern made of squares across the entire canvas. Try to get a chessboard effect.

----
#### exercise ####
content: 
Write a program able to draw a ruler of a specific measure unit (either postscript points or millimeters) across the entire canvas. The ruler ticks should be of different lengths according to a given rhythm. Use a while loop. Numbers displayed along the ruler are a plus.

----